{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 56,\n  TESTNET = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xf401E324a07f270f3Dcfd4c482D17D9651e26Da2'\n\nexport const INIT_CODE_HASH = '0x4940a0b8e02a037f985657751a8bcdf863f0de7cc22c7b40fe46300315e806c6'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    console.log(`quotient ${this.numerator.toString()} ${this.denominator.toString()}`)\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      console.log(`sdk quote currencyAmount.raw`)\n      console.log(currencyAmount.raw.toString())\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public quote1(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      console.log(`sdk quote currencyAmount.raw`)\n      console.log(currencyAmount.raw.toString())\n      return new TokenAmount(this.quoteCurrency, super.multiply(JSBI.divide(currencyAmount.raw, JSBI.BigInt(2))).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public quote2(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      console.log(`sdk quote currencyAmount.raw`)\n      console.log(currencyAmount.raw.toString())\n      return new TokenAmount(this.quoteCurrency, super.multiply(JSBI.multiply(currencyAmount.raw, JSBI.BigInt(2))).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Cake-LP',\n      'Pancake LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    // if (this.token0.address === '0xF0A774cD40bf57F858681723BfD7435b4aa369F2') {\n    //   return new Price(this.token0, this.token1, JSBI.multiply(this.tokenAmounts[0].raw, JSBI.BigInt(9745)), this.tokenAmounts[1].raw)\n    // }\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    // if (this.token1.address === '0xF0A774cD40bf57F858681723BfD7435b4aa369F2') {\n    //   return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, JSBI.multiply(this.tokenAmounts[0].raw, JSBI.BigInt(9745)))\n    // }\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    console.log('getOutputAmount sdk')\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const isBuy = inputAmount.token.address.toLowerCase() == '0xF0A774cD40bf57F858681723BfD7435b4aa369F2'.toLowerCase()\n    var amountOut: JSBI = JSBI.BigInt(0)\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    if (isBuy) {\n      const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_DENOMINATOR)\n      const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n      const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n      amountOut = JSBI.divide(numerator, denominator)\n      amountOut = JSBI.subtract(amountOut, JSBI.divide(JSBI.multiply(amountOut, JSBI.BigInt(25)), FEES_DENOMINATOR))\n    } else {\n      // uint amountInWithFee = amountIn.mul(9475);\n      // uint numerator = amountInWithFee.mul(reserveOut);\n      // uint denominator = reserveIn.mul(10000).add(amountInWithFee);\n      // amountOut = numerator / denominator;\n\n      const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.BigInt(9475))\n      const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n      const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n      amountOut = JSBI.divide(numerator, denominator)\n    }\n    \n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      amountOut\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const isBuy = inputReserve.token.address.toLowerCase() == '0xF0A774cD40bf57F858681723BfD7435b4aa369F2'.toLowerCase()\n    var amountIn: JSBI = ONE\n    if (isBuy) {\n      // uint numerator = reserveIn.mul(amountOut).mul(uint(10000));\n      // uint denominator = reserveOut.sub(amountOut).mul(uint(10000));\n      // amountIn = (numerator / denominator).sub(amountOut.mul(swapFee)/10000);\n      const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n      const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n      // const fee = JSBI.divide(JSBI.multiply(JSBI.BigInt(25), outputAmount.raw), JSBI.BigInt(FEES_DENOMINATOR))\n      amountIn = JSBI.divide(numerator, denominator)\n      // amountIn = JSBI.add(amountIn, fee)\n    } else {\n      // uint numerator = reserveOut.mul(amountOut).mul(10000);\n      // uint denominator = reserveIn.add(amountOut).mul(uint(10000).add(swapFee));\n      // amountIn = (numerator / denominator);\n\n      const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), JSBI.BigInt(9475))\n      const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n      amountIn = JSBI.divide(numerator, denominator)\n    }\n\n    // const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    // const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      amountIn\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  console.log('sdk computePriceImpact')\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  console.log(`inputAmount.raw ${inputAmount.raw.toString()}`)\n  console.log(`outputAmount ${outputAmount.raw.toString()}`)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  console.log(`slippage.numerator ${slippage.numerator.toString()}`)\n  console.log(`slippage.denominator ${slippage.denominator.toString()}`)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    console.log('____ Trade init')\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","console","log","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","quote1","quote2","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","isBuy","amountOut","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","amountIn","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactQuote","slippage","computePriceImpact","exactIn","exactOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}